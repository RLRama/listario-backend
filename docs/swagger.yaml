basePath: /
definitions:
  github_com_kataras_iris_v12_middleware_jwt.TokenPair:
    properties:
      access_token:
        items:
          type: integer
        type: array
      refresh_token:
        items:
          type: integer
        type: array
    type: object
  models.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  models.RegisterRequest:
    properties:
      email:
        type: string
      password:
        type: string
      username:
        type: string
    required:
    - email
    - password
    - username
    type: object
  models.UpdateUserRequest:
    properties:
      email:
        type: string
      username:
        type: string
    type: object
  models.UserResponse:
    properties:
      createdAt:
        type: string
      email:
        type: string
      id:
        type: integer
      updatedAt:
        type: string
      username:
        type: string
    type: object
info:
  contact:
    email: rl.ramiro11@gmail.com
    name: API Support
  description: This is the API for the Listario application.
  license:
    name: MIT License
    url: https://opensource.org/license/mit/
  termsOfService: http://swagger.io/terms/
  title: Listario API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Logs in a user and returns an access token and a refresh token.
      parameters:
      - description: User Login Payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/models.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: A pair of access and refresh tokens
          schema:
            $ref: '#/definitions/github_com_kataras_iris_v12_middleware_jwt.TokenPair'
        "400":
          description: Invalid request format
          schema:
            properties:
              error:
                type: string
            type: object
        "401":
          description: Invalid credentials
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Login failed
          schema:
            properties:
              error:
                type: string
            type: object
      summary: Log in a user
      tags:
      - Authentication
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Provides a new access and refresh token pair using a valid refresh
        token.
      parameters:
      - description: Payload with the 'refresh_token' field populated
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/github_com_kataras_iris_v12_middleware_jwt.TokenPair'
      produces:
      - application/json
      responses:
        "200":
          description: A new pair of access and refresh tokens
          schema:
            $ref: '#/definitions/github_com_kataras_iris_v12_middleware_jwt.TokenPair'
        "400":
          description: Invalid request format
          schema:
            properties:
              error:
                type: string
            type: object
        "401":
          description: Invalid or expired refresh token
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Could not refresh token
          schema:
            properties:
              error:
                type: string
            type: object
      summary: Refresh access token
      tags:
      - Authentication
  /auth/register:
    post:
      consumes:
      - application/json
      description: Creates a new user account with a username, email, and password.
      parameters:
      - description: User Registration Payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/models.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.UserResponse'
        "400":
          description: Invalid request format
          schema:
            properties:
              error:
                type: string
            type: object
        "409":
          description: User with this email already exists
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Failed to register user
          schema:
            properties:
              error:
                type: string
            type: object
      summary: Register a new user
      tags:
      - Authentication
  /users/logout:
    get:
      description: Invalidates the current user's JWT, effectively logging them out.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            properties:
              message:
                type: string
            type: object
        "401":
          description: Invalid token
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Could not logout
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Log out the current user
      tags:
      - Users
  /users/me:
    get:
      description: Retrieves the details for the currently authenticated user.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserResponse'
        "401":
          description: Unauthorized
          schema:
            properties:
              error:
                type: string
            type: object
        "404":
          description: User not found
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Could not retrieve user details
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get current user details
      tags:
      - Users
    put:
      consumes:
      - application/json
      description: Updates the username and/or email for the currently authenticated
        user.
      parameters:
      - description: User Update Payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/models.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserResponse'
        "400":
          description: Invalid request format
          schema:
            properties:
              error:
                type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            properties:
              error:
                type: string
            type: object
        "409":
          description: User with this email already exists
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Could not update user details
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update current user details
      tags:
      - Users
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and a JWT.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
